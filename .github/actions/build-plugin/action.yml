name: 'Build Plugin'
description: 'Build a contrib plugin for specified OS and architecture'

inputs:
  plugin-name:
    description: 'Plugin name (e.g., cloudflare)'
    required: true
  os:
    description: 'Target OS (linux, darwin, freebsd)'
    required: true
  arch:
    description: 'Target architecture (amd64, arm64, arm, mipsle)'
    required: true
  go-version:
    description: 'Go version to use'
    required: true
    default: 'stable'
  tag:
    description: 'Tag to append to binary name'
    required: false
    default: ''

outputs:
  binary-name:
    description: 'Name of the built binary'
    value: ${{ steps.build-info.outputs.binary-name }}

runs:
  using: 'composite'
  steps:
    - name: Set build info
      id: build-info
      shell: bash
      run: |
        PLUGIN="${{ inputs.plugin-name }}"
        OS="${{ inputs.os }}"
        ARCH="${{ inputs.arch }}"
        TAG="${{ inputs.tag }}"

        if [ -n "$TAG" ]; then
          BINARY_NAME="stunmesh-${PLUGIN}-${OS}-${ARCH}-${TAG}"
        else
          BINARY_NAME="stunmesh-${PLUGIN}-${OS}-${ARCH}"
        fi
        echo "binary-name=$BINARY_NAME" >> "$GITHUB_OUTPUT"

    - uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go-version }}

    - name: Build Plugin (Linux/Darwin)
      if: inputs.os != 'freebsd'
      shell: bash
      run: |
        cd contrib/${{ inputs.plugin-name }}
        make APP=${{ steps.build-info.outputs.binary-name }}
      env:
        GOARCH: ${{ inputs.arch }}
        GOOS: ${{ inputs.os }}

    - name: Build Plugin (FreeBSD)
      if: inputs.os == 'freebsd'
      uses: vmactions/freebsd-vm@v1.2.4
      with:
        arch: ${{ inputs.arch }}
        sync: sshfs
        prepare: |
          pkg install -y gmake go
        run: |
          cd $GITHUB_WORKSPACE/contrib/${{ inputs.plugin-name }}
          gmake APP=${{ steps.build-info.outputs.binary-name }}

    - name: Move binary to root
      shell: bash
      run: |
        PLUGIN="${{ inputs.plugin-name }}"
        BINARY="${{ steps.build-info.outputs.binary-name }}"
        mv "contrib/${PLUGIN}/${BINARY}" .
