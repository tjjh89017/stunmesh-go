// Code generated by MockGen. DO NOT EDIT.
// Source: cloudflare.go
//
// Generated by this command:
//
//	mockgen -source=cloudflare.go -destination=cloudflare_mock.go -package=store_mock
//

// Package store_mock is a generated GoMock package.
package store_mock

import (
	context "context"
	reflect "reflect"

	cloudflare "github.com/cloudflare/cloudflare-go"
	gomock "go.uber.org/mock/gomock"
)

// MockCloudflareApi is a mock of CloudflareApi interface.
type MockCloudflareApi struct {
	ctrl     *gomock.Controller
	recorder *MockCloudflareApiMockRecorder
	isgomock struct{}
}

// MockCloudflareApiMockRecorder is the mock recorder for MockCloudflareApi.
type MockCloudflareApiMockRecorder struct {
	mock *MockCloudflareApi
}

// NewMockCloudflareApi creates a new mock instance.
func NewMockCloudflareApi(ctrl *gomock.Controller) *MockCloudflareApi {
	mock := &MockCloudflareApi{ctrl: ctrl}
	mock.recorder = &MockCloudflareApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudflareApi) EXPECT() *MockCloudflareApiMockRecorder {
	return m.recorder
}

// CreateDNSRecord mocks base method.
func (m *MockCloudflareApi) CreateDNSRecord(ctx context.Context, rc *cloudflare.ResourceContainer, params cloudflare.CreateDNSRecordParams) (cloudflare.DNSRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDNSRecord", ctx, rc, params)
	ret0, _ := ret[0].(cloudflare.DNSRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDNSRecord indicates an expected call of CreateDNSRecord.
func (mr *MockCloudflareApiMockRecorder) CreateDNSRecord(ctx, rc, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDNSRecord", reflect.TypeOf((*MockCloudflareApi)(nil).CreateDNSRecord), ctx, rc, params)
}

// DeleteDNSRecord mocks base method.
func (m *MockCloudflareApi) DeleteDNSRecord(ctx context.Context, rc *cloudflare.ResourceContainer, recordId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDNSRecord", ctx, rc, recordId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDNSRecord indicates an expected call of DeleteDNSRecord.
func (mr *MockCloudflareApiMockRecorder) DeleteDNSRecord(ctx, rc, recordId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDNSRecord", reflect.TypeOf((*MockCloudflareApi)(nil).DeleteDNSRecord), ctx, rc, recordId)
}

// ListDNSRecords mocks base method.
func (m *MockCloudflareApi) ListDNSRecords(ctx context.Context, rc *cloudflare.ResourceContainer, params cloudflare.ListDNSRecordsParams) ([]cloudflare.DNSRecord, *cloudflare.ResultInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDNSRecords", ctx, rc, params)
	ret0, _ := ret[0].([]cloudflare.DNSRecord)
	ret1, _ := ret[1].(*cloudflare.ResultInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDNSRecords indicates an expected call of ListDNSRecords.
func (mr *MockCloudflareApiMockRecorder) ListDNSRecords(ctx, rc, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDNSRecords", reflect.TypeOf((*MockCloudflareApi)(nil).ListDNSRecords), ctx, rc, params)
}

// UpdateDNSRecord mocks base method.
func (m *MockCloudflareApi) UpdateDNSRecord(ctx context.Context, rc *cloudflare.ResourceContainer, params cloudflare.UpdateDNSRecordParams) (cloudflare.DNSRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDNSRecord", ctx, rc, params)
	ret0, _ := ret[0].(cloudflare.DNSRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDNSRecord indicates an expected call of UpdateDNSRecord.
func (mr *MockCloudflareApiMockRecorder) UpdateDNSRecord(ctx, rc, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDNSRecord", reflect.TypeOf((*MockCloudflareApi)(nil).UpdateDNSRecord), ctx, rc, params)
}

// ZoneIDByName mocks base method.
func (m *MockCloudflareApi) ZoneIDByName(zoneName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZoneIDByName", zoneName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZoneIDByName indicates an expected call of ZoneIDByName.
func (mr *MockCloudflareApiMockRecorder) ZoneIDByName(zoneName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZoneIDByName", reflect.TypeOf((*MockCloudflareApi)(nil).ZoneIDByName), zoneName)
}
